#JENKINS 
##Jenkins overview 
-Open source automation server enables build , test and deploy the s/w
-Contionous integration and delivery server 
-Commit, build, test, stage,deploy,run 
##Continous workflow
1. Put modified code in SCM(source code management)===>initiate CI process
2. Build code===>test
3. Testing===>report
4. Deploy ===>commit
5. freeze the deployed code 
....................................................................................................................................
Continuous :ImplementsAgile + Devops = tools test each code modification before it is integrated into the official source.
code>>>>build>>>integrate>>>>test>>>>release>>>>deploy>>>>operate
<<<<<<Agile>>>>>>>>early stages
<<<<<<<<<<<<<<<CI>>>>>>>>>>>>>>>>>>>makes easier to find to bugs and fix it
<<<<<<<<<<<<<<<<<<<<<<<<<CD>>>>>>>>>>>>>>>>>>>>>>>>
....................................................................................................................................
1 CI:frequent, automatic integration of code
Automatically tests all new and modified code with the master code
2. CD:the natural extension of CI
Ensures that the code is always ready to be deployed
- Delivery pipelines are used
3. Continuous Deployment automatically deploys all validated changes to production
...................................................................................................................................
##Pipeline
You define a Jenkins Pipeline to run each activity in the same order every time
Pipeline is glue for the activities defined
Do NOT code build actions directly in the Pipeline!
The Pipeline runs each time the code is modified
....................................................................................................................................
#Source code management systems -Version Control Systems (VCS):
- Record all changes for a set of files over time 
- Allow you to share changes
- Provide merging and tracking capabilities of the recorded changes
....................................................................................................................................
#Modern SCM
- Allows to collaborate efficiently on a single codebase
- Helps resolve code conflicts
- Made easy to share contents
- Allows to track every change(a Single Source of Truth)
- Provides a complete modification history
- Allows easy rollback to an earlier version
....................................................................................................................................
##recent version of SCM
- Ability to share codebase and collabrate on modifications
- Support multiple braches 
- Jenkins can work with virtually with any modern SCM 
....................................................................................................................................
##Advanced SCM 
- Allows pipeline  run to be triggered by modification in code
- Git support 
- Support the most powerful Jenkins capabilities
....................................................................................................................................
- ##SCM terminology 
- branch : pointer to single commit
- head: latest branch =master branch 
- merge: to integrate 
- push , commit , pullrequest 
....................................................................................................................................
##Testing goals
- validate goals met by s/w or not 
- bugs searching to fix and improving quality 
- facilitate refactoring and upgrades by validating that its working 
....................................................................................................................................
##Testing activities 
Differnt types of test are involved in good testing 
- unit test-small piece of codeis validated :(faster) 
- integration test-validates integration b/w multiple subsystems :(faster) 
- smoke test/sanity checking-basic function of system validated :(faster) 
- funtional testing :validates normal s/w behaviors against the expextations and requirements (slow)
- non regression test: validates that system produce same results or not (slow)
- acceptance test: full product test from prespective of end user(slow)
- code , quality and static analysis
- performance and security testing 
- report test results 
.....................................................................................................................................
##Automated testing : 
- run frequently 
- independent from each other
- run in same order
- defines different tests at differt stages 
- run in parallel
.....................................................................................................................................
##Manual testing 
- appropriate when test result is subjective -such as 
- user experience test
- cost automation cases 
- sould be performed only after automated tests are passed and very rarely
.....................................................................................................................................
- Jenkins enables to run large no. of tests frequently and appropriate stages in build cycle 
.....................................................................................................................................
##Jenkins Pipelines 
- plugins which supports implementing and integrating continuous delivery pipelines into Jenkins
- provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code". 
- The definition of a Jenkins Pipeline : written into a text file (Jenkinsfile).
1. Pipeline
- A user-defined model of a CD pipeline. 
- A Pipeline’s code defines your entire build process includes stages for building an application, testing it and then delivering it.
2. Node
- machine which is part of the Jenkins environment and is capable of executing a Pipeline.
3. Stage
- defines a conceptually distinct subset of tasks performed through the entire Pipeline
4. Step
- single task 
.....................................................................................................................................
##Why Pipeline?
- It  adds a powerful set of automation tools onto Jenkins,
- Supports use cases that span from simple CI to comprehensive CD pipelines
.....................................................................................................................................
##Features:Jenkins pipeline
1. Durable: The Jenkins master can restart and the Pipeline continues to run
2. Pausable: can stop and wait for human input or approval
3. Versatile: supports complex real-world CD requirements (fork, join, loop, parallelize)
4. Extensible: supports custom extensions to its "DSL" (Domain-specific Language)
....................................................................................................................................
##Benifits:Jenkins pipeline
Reduces number of jobs
Easier maintenance
Decentralization of job configuration
Easier specification through code
....................................................................................................................................
